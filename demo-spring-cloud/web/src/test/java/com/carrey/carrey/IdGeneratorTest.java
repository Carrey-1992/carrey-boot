package com.carrey.carrey;

import com.google.common.annotations.VisibleForTesting;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Random;

/**
 * @author Carrey
 * @version 0.0.1
 * @description IdGeneratorTest
 * @create 2020-01-20 10:38
 */
public class IdGeneratorTest {
  @Test
  public void testIdGenerator() {
    for (int i = 0; i < 4; i++) {
      IdGenerator idGenerator = new RandomIdGenerator();
      System.out.println(idGenerator.generate());
    }
  }


  public class RandomIdGenerator implements LogTraceIdGenerator {
    private final Logger logger = LoggerFactory.getLogger(IdGenerator.class);

    @Override
    public String generate() {
      String id = "";
      //获取主机名
      final String hostName = getLastFiledOfHostName();
      long currentTimeMillis = System.currentTimeMillis();
      //获取八位随机字符串
      char[] randomChars = generateRandomAlphameric(8);
      //获取id
      id = String.format("%s-%d-%s", hostName, currentTimeMillis, new String(randomChars));
      return id;
    }

    @VisibleForTesting
    protected char[] generateRandomAlphameric(int length) {
      char[] randomChars = new char[length];
      int count = 0;
      Random random = new Random();
      while (count < length) {
        int maxAscii = 'z';
        int randomAscii = random.nextInt(maxAscii);
        boolean isDigit = randomAscii >= '0' && randomAscii <= '9';
        boolean isUppercase = randomAscii >= 'A' && randomAscii <= 'Z';
        boolean isLowercase = randomAscii >= 'a' && randomAscii <= 'z';
        if (isDigit || isUppercase || isLowercase) {
          randomChars[count] = (char) (randomAscii);
          ++count;
        }
      }
      return randomChars;
    }

    @VisibleForTesting
    protected String getLastFiledOfHostName() {
      String substrOfHostName = null;
      try {
        String hostName = InetAddress.getLocalHost().getHostName();
        String[] tokens = hostName.split("\\.");
        substrOfHostName = tokens[tokens.length - 1];
      } catch (UnknownHostException e) {
        logger.warn("Failed to get the host name.", e);
      }

      return substrOfHostName;
    }
  }

  /**
   * Id Generator that is used to generate random IDs.
   *
   * <p>
   *   The IDs generated by this class are not absolutely unique,
   *   but the probability of duplication is very low.
   * <p/>
   */
  public interface IdGenerator {
    /** Generate the random ID.
     * The IDs may be duplicated only in extreme situation.
     *
     * @return an random ID
     */
    String generate();
  }

  public interface LogTraceIdGenerator extends IdGenerator {
  }


}
